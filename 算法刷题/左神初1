# 一.两个数组的交集 II 
## <a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/" target="_blank">两个数组的交集 II </a>


> 给定两个数组，编写一个函数来计算它们的交集。
> 
> 示例 1:
> 
> 输入: nums1 = [1,2,2,1], nums2 = [2,2]
> 输出: [2,2]
> 
> 示例 2:
> 
> 输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
> 输出: [4,9]
> 说明：
> 
> 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。
> 我们可以不考虑输出结果的顺序。
> 
> 进阶:
> 
> 如果给定的数组已经排好序呢？你将如何优化你的算法？
> 
> 如果 nums1 的大小比 nums2 小很多，哪种方法更优？
> 
> 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？




## 如何思考两个数组的算法？
1. 暴力解决先寻找思路
2. 数组排序尝试优化
3. 查找类问题尝试二分查找
4. 存在类和次数类尝试用HashMap
5. 快慢(双)指针的一次遍历算法

## 1.无序数组，利用HashMap解决O(N+M)

	public int[] intersect1(int[] nums1, int[] nums2) {
		// 利用HashMap两次遍历
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i = 0; i < nums1.length; i++){
        	hm.put(nums1[i], hm.getOrDefault(nums1[i], 0)+1);
        }
        
        List<Integer> tmp = new ArrayList<>();
        // 如果nums1中存在，则次数-1并加入tmp;
        for(int i = 0; i < nums2.length; i++){
        	if(hm.containsKey(nums2[i]) && hm.get(nums2[i]) > 0){
        		hm.put(nums2[i], hm.get(nums2[i])-1);
        		tmp.add(nums2[i]);
        	}
        }
        return tmp.stream().mapToInt(Integer::valueOf).toArray();
	}

## 2. 有序数组，利用双指针解决O(N+M)

    public int[] intersect(int[] nums1, int[] nums2) {
		ArrayList<Integer> res = new ArrayList();
		
		Arrays.sort(nums1);
		Arrays.sort(nums2);
		
		// 双指针，不相等时移动较小的，相等时都移动
		int i = 0;
		int j = 0;
		while(i<nums1.length && j<nums2.length) {
			// 如果相等，则加入结果集，并且双指针都移动
			if(nums1[i] == nums2[j]) {
				res.add(nums1[i]);
				i++;
				j++;
			}else {
				if(nums1[i] > nums2[j]) {
					j++;
				}else {
					i++;
				}
			}
		}
		return res.stream().mapToInt(Integer::valueOf).toArray();
    }

## 3. 有序数组且无重复，利用二分O(N*logM)
    public int[] intersect(int[] nums1, int[] nums2) {
		ArrayList<Integer> res = new ArrayList();
		// 假设数组无重复
		Arrays.sort(nums1);
		Arrays.sort(nums2);
		
		
		// 假设nums1长度较小
		for(int num1 : nums1 ) {
			if(binarySearch(nums2,num1)) {
				res.add(num1);
			}
		}
		
		return res.stream().mapToInt(Integer::valueOf).toArray();
    }

	private boolean binarySearch(int[] nums, int target) {
		int left = 0;
		int right = nums.length-1;
		while(left <= right) {
			int mid = (left + right)/2;
			if(nums[mid] == target) {
				return true;
			}else if(nums[mid] > target) {
				right = mid -1;
			}else {
				left = mid+1;
			}
		}
		return false;
	}

---
进阶:

如果给定的数组已经排好序呢？你将如何优化你的算法？

答：见方法2和方法3

如果 nums1 的大小比 nums2 小很多，哪种方法更优？

答：O(N*logM),O(N+M),显然 O(N*logM)较好。

如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？

答：此时不能排序，且用Map记录寻找结果的方法1较好。



# 二.旋转数组 
## <a href="https://leetcode-cn.com/problems/rotate-array/" target="_blank">旋转数组 </a>

> 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
> 
> 示例 1:
> 
> 输入: [1,2,3,4,5,6,7] 和 k = 3
> 
> 输出: [5,6,7,1,2,3,4]
> 
> 解释:
> 向右旋转 1 步: [7,1,2,3,4,5,6]
> 向右旋转 2 步: [6,7,1,2,3,4,5]
> 向右旋转 3 步: [5,6,7,1,2,3,4]
> 示例 2:
> 
> 输入: [-1,-100,3,99] 和 k = 2
> 
> 输出: [3,99,-1,-100]
> 
> 解释: 
> 向右旋转 1 步: [99,-1,-100,3]
> 向右旋转 2 步: [3,99,-1,-100]
> 
> 说明:
> 
> 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
> 要求使用空间复杂度为 O(1) 的 原地 算法。

## 如何思考单个数组？
1. 暴力解法寻找思路
2. 拷贝额外的空间
3. 寻找原地置换的规律
4. 逆置，排序，计数的各种优化

## 1.暴力解法，旋转K次O(N*K)

    public void rotate(int[] nums, int k) {
        int temp, previous;
        for (int i = 0; i < k; i++) {
            previous = nums[nums.length - 1];
            for (int j = 0; j < nums.length; j++) {
                temp = nums[j];
                nums[j] = previous;
                previous = temp;
            }
        }
    }


## 2.额外数组O(N)

    public void rotate(int[] nums, int k) {
        int[] a = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            a[(i + k) % nums.length] = nums[i];
        }
        for (int i = 0; i < nums.length; i++) {
            nums[i] = a[i];
        }
    }

## 3.三次逆置，O(N)
思路是这么思考得出的的：

比如数组AAAAAAABB，数字代表长度：(7) (2)要转变成（2）（7），如果两两互换长度不匹配，很复杂。

我们发现(7) (2)倒过来看就是（2）（7），那么我们逆置一次，变成BBAAAAAAA，形式上满足了要求，而内容分别是正确答案的逆置。

所以我们进行三次逆置即可。

    public void rotate(int[] nums, int k) {
        k %= nums.length;
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
    }
    public void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

## 4.环状旋转O(N)

建议看题解，用小学生换座位的思路来想就能明白。重点是理解总数为N这个限制条件

    public void rotate(int[] nums, int k) {
        k = k % nums.length;
        int count = 0;
        for (int start = 0; count < nums.length; start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % nums.length;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
        }
    }


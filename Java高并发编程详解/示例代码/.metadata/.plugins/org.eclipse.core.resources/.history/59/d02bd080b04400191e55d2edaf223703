package chapter27;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

//包可见，ActiveMessage只能在框架内使用，不会对外暴露
class ActiveMessage {
	//接口方法的参数
	private final Object[] objects;
	
	//接口方法
	private final Method method;
	
	//有返回值的方法，会返回ActiveFuture<?>类型
	private final ActiveFuture<Object> future;
	
	//具体的service接口
	private final Object service;
	
	//构造ActiveMessage是由Builder来完成的
	private ActiveMessage(Builder builder){
		this.objects = builder.objects;
		this.method = builder.method;
		this.future = builder.future;
		this.service = builder.service;
	}
	
	//Builder主要负责对ActiveMessage的构建，是一种典型的Gof Builder设计模式
	static class Builder{

		public Object service;
		public ActiveFuture<Object> future;
		public Method method;
		public Object[] objects;
		
		public Builder useMethod(Method method){
			this.method = method;
			return this;
		}
		
		public Builder returnFuture(ActiveFuture<Object> future){
			this.future = future;
			return this;
		}
		
		public Builder withObjects(Object[] objects){
			this.objects = objects;
			return this;
		}
		
		public Builder forService(Object service){
			this.service = service;
			return this;
		}
		
		//构建ActiveMessage实例
		public ActiveMessage build(){
			return new ActiveMessage(this);
		}
		
	}
	//ActiveMessage的方法通过反射调用执行的具体实现
	public void execute(){
		//执行接口的方法
		try {
			Object result = method.invoke(service, objects);
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
}

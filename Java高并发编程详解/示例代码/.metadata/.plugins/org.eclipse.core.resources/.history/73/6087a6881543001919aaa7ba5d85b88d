package chapter25;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.TimeUnit;


public class LRUCache<K,V> {
	//用于纪录key值的顺序
	private final LinkedList<K> keyList = new LinkedList<>();
	
	//用于存放数据
	private final Map<K,V> cache  = new HashMap<>();
	
	//cache的最大容量
	private final int capacity;
	
	//cacheLoader接口提供了一种加载数据的方式
	private final CacheLoader<K,V> cacheLoader;
	
	public LRUCache(int capacity, CacheLoader<K, V> cacheLoader){
		this.capacity = capacity;
		this.cacheLoader = cacheLoader;
	}
	
	public void put(K key, V value){
		//当元素数量超过容量时，将最老的数据清除
		if(keyList.size() >= capacity){
			K eldestKey = keyList.removeFirst();
			cache.remove(eldestKey);
		}
		//如果数据已存在，则从key队列删除
		if(keyList.contains(key))
			keyList.remove(key);
		keyList.addLast(key);
		cache.put(key, value);
	}
	
	public V get(K key){
		V value;
		//先将key从keyList删除
		boolean success =keyList.remove(key);
		//如果失败则证明不存在
		if(!success){
			value = cacheLoader.load(key);
			//调用put方法cache数据
			this.put(key, value);
		}else{
			//因为最近使用，所以放到队尾
			value = cache.get(key);
			keyList.addLast(key);
		}
		return value;
	}
	
	@Override
	public String toString(){
		return this.keyList.toString();
	}
	
	public static void main(String[] args){
		LRUCache<String, Reference> cache = new LRUCache<>(5, key -> new Reference());
		cache.get("Alex");
		cache.get("Jack");
		cache.get("Gavin");
		cache.get("Dillon");
		cache.get("Leo");
		
		//踢出Alex
		cache.get("Jenny");
		System.out.println(cache);
		
		//溢出
		LRUCache<String, Reference> cache2 = new LRUCache<>(5, key -> new Reference());
		for(int i = 0;i< Integer.MIN_VALUE;i++){
			cache2.get(i);
			TimeUnit.SECONDS.sleep(1);
			
		}
	}
}
